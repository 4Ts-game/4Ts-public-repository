<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Debugging</name>
    </assembly>
    <members>
        <member name="T:DG.Debugging.Verbosity">
            <summary>Verbosity</summary>
        </member>
        <member name="F:DG.Debugging.Verbosity.None">
            <summary>No logs</summary>
        </member>
        <member name="F:DG.Debugging.Verbosity.Verbose">
            <summary>Log everything, verbose logs included</summary>
        </member>
        <member name="F:DG.Debugging.Verbosity.Normal">
            <summary>Log everything except logs marked as verbose</summary>
        </member>
        <member name="F:DG.Debugging.Verbosity.Errors">
            <summary>Log only errors</summary>
        </member>
        <member name="F:DG.Debugging.Verbosity.ErrorsAndWarnings">
            <summary>Log only errors and warnings</summary>
        </member>
        <member name="T:DG.Debugging.Delogger">
            <summary>
            Logs messages using the given options
            </summary>
        </member>
        <member name="F:DG.Debugging.Delogger.verbosity">
            <summary>Sets the runtime verbosity value, which indicates the type of messages that will be logged</summary>
        </member>
        <member name="F:DG.Debugging.Delogger.editorVerbosity">
            <summary>Sets the editor verbosity value, which indicates the type of messages that will be logged</summary>
        </member>
        <member name="F:DG.Debugging.Delogger.enabled">
            <summary>If FALSE doesn't log anything, neither in editor nor at runtime</summary>
        </member>
        <member name="F:DG.Debugging.Delogger.stripHtmlTags">
            <summary>If TRUE strips all HTML tags from the logs (useful in standalone builds for cleaner logs)</summary>
        </member>
        <member name="M:DG.Debugging.Delogger.Log(System.Object,System.Object,UnityEngine.Object,System.String)">
            <summary>
            Logs the given message with the given options
            </summary>
        </member>
        <member name="M:DG.Debugging.Delogger.ForceLog(System.Object,System.Object,UnityEngine.Object,System.String)">
            <summary>
            Logs the given message with the given options,
            and forces it so it will log even if <see cref="F:DG.Debugging.Delogger.verbosity"/> is set to None
            (but won't log it if the logger is not enabled)
            </summary>
        </member>
        <member name="M:DG.Debugging.Delogger.LogVerbose(System.Object,System.Object,UnityEngine.Object)">
            <summary>
            Logs the given message with the given options
            </summary>
        </member>
        <member name="M:DG.Debugging.Delogger.LogWarning(System.Object,System.Object,UnityEngine.Object)">
            <summary>
            Logs the given message with the given options
            </summary>
        </member>
        <member name="M:DG.Debugging.Delogger.LogError(System.Object,System.Object,UnityEngine.Object)">
            <summary>
            Logs the given message with the given options
            </summary>
        </member>
        <member name="M:DG.Debugging.Delogger.Important.Log(System.Int32,System.Object,System.Object,UnityEngine.Object,System.String)">
            <summary>
            Logs the given important message with the given options
            </summary>
            <param name="importance">0 to 1 (0 being more important than 1)</param>
        </member>
        <member name="M:DG.Debugging.Delogger.Important.ForceLog(System.Int32,System.Object,System.Object,UnityEngine.Object,System.String)">
            <summary>
            Logs the given important message with the given options,
            and forces it so it will log even if <see cref="F:DG.Debugging.Delogger.verbosity"/> is set to None
            (but won't log it if the logger is not enabled)
            </summary>
            <param name="importance">0 to 1 (0 being more important than 1)</param>
        </member>
        <member name="M:DG.Debugging.Delogger.Editor.Log(System.Object,System.Object,UnityEngine.Object,System.String)">
            <summary>
            Logs the given editor-only message with the given options
            </summary>
        </member>
        <member name="M:DG.Debugging.Delogger.Editor.ForceLog(System.Object,System.Object,UnityEngine.Object,System.String)">
            <summary>
            Logs the given editor-only message with the given options,
            and forces it so it will log even if <see cref="F:DG.Debugging.Delogger.verbosity"/> is set to None
            (but won't log it if the logger is not enabled)
            </summary>
        </member>
        <member name="M:DG.Debugging.Delogger.Editor.LogVerbose(System.Object,System.Object,UnityEngine.Object)">
            <summary>
            Logs the given editor-only message with the given options
            </summary>
        </member>
        <member name="M:DG.Debugging.Delogger.Editor.LogWarning(System.Object,System.Object,UnityEngine.Object)">
            <summary>
            Logs the given editor-only message with the given options
            </summary>
        </member>
        <member name="M:DG.Debugging.Delogger.Editor.LogError(System.Object,System.Object,UnityEngine.Object)">
            <summary>
            Logs the given editor-only message with the given options
            </summary>
        </member>
        <member name="T:DG.Debugging.DeloggerExtensions">
            <summary>
            Extensions used to format objects for logging
            </summary>
        </member>
        <member name="M:DG.Debugging.DeloggerExtensions.ToLogString``1(System.Collections.Generic.IList{``0},System.Boolean)">
            <summary>
            Converts the given list into a log-formatted string
            </summary>
            <param name="list">List to log</param>
            <param name="lineBreakWIndex">If TRUE starts each element with a lineBreak and prefixes it with its index</param>
        </member>
        <member name="M:DG.Debugging.DeloggerExtensions.ToLogString``1(System.Collections.Generic.IList{``0},System.Func{``0,System.String},System.Boolean)">
            <summary>
            Converts the given list into a log-formatted string
            </summary>
            <param name="list">List to log</param>
            <param name="elaborate">Customized formatting function.
            <para><code>Example:</code></para>
            <para>Assuming a list of 4 gameObjects named "Gino", "Pino", "Lino", "Mandarino":</para>
            <para><code>Debug.Log("A sample GameObject list:" + _sampleObjList.ToLogString(x => "My name is " + x.name, true));</code></para>
            <para>Outputs:</para>
            <code><para>A sample GameObject list:</para>
            <para>0: My name is Gino</para>
            <para>1: My name is Pino</para>
            <para>2: My name is Lino</para>
            <para>3: My name is Mandarino</para></code>
            </param>
            <param name="lineBreakWIndex">If TRUE starts each element with a lineBreak and prefixes it with its index</param>
        </member>
    </members>
</doc>
